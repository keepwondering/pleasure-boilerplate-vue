import path from 'path'
import commonjs from 'rollup-plugin-commonjs'
import json from 'rollup-plugin-json'
import alias from 'rollup-plugin-alias'
import minify from 'rollup-plugin-babel-minify'
import { name, version, author, license } from './package.json'
import vuePlugin from 'rollup-plugin-vue'
import postCss from 'rollup-plugin-postcss'
import postCssVariables from 'postcss-css-variables'
import postCssExtend from 'postcss-extend'
import postCssEasings from 'postcss-easings'
import postCssNested from 'postcss-nested'
import postCssHexRgba from 'postcss-hexrgba'
import postCssColorFuntion from 'postcss-color-function'
import postCssCalc from 'postcss-calc'
import postCssPresetEnv from 'postcss-preset-env'
import Dot from 'dot-object'
import { RollupPlugin } from 'pleasure-ui-doc'
import { get, kebabCase, mapKeys } from 'lodash'
import { src } from './build/lib/from.js'

const dot = new Dot('-')
const postCssVars = mapKeys(dot.dot(require('./postcss.variables.js')), (v, k) => kebabCase(k).replace(/-default$/, ''))

const postCssSuite = [
  postCssPresetEnv({
    stage: 4
  }),
  postCssNested(),
  postCssExtend(),
  postCssEasings(),
  postCssVariables({
    variables: postCssVars
  }),
  postCssHexRgba(),
  postCssColorFuntion(),
  postCssCalc()
]

const plugins = [
  alias({
    src: src(),
    lib: src('lib')
  }),
  json(),
  commonjs({
    // non-CommonJS modules will be ignored, but you can also
    // specifically include/exclude files

    // if true then uses of `global` won't be dealt with by this plugin
    ignoreGlobal: true, // Default: false

    // if false then skip sourceMap generation for CommonJS modules
    sourceMap: true // Default: true
  }),
  vuePlugin({ css: false })
]

const banner = `/*!
 * ${ name } v${ version }
 * (c) {{{ year }}}-${ new Date().getFullYear() } ${ author }
 * ${ license }
 */`

export default [
  {
    input: 'src/index.js',
    output: [
      {
        file: `dist/${ name }.js`,
        format: 'cjs',
        banner
      },
      {
        file: `dist/${ name }.esm.js`,
        format: 'esm',
        banner
      }
    ],
    plugins: plugins.concat([
      postCss({
        extract: false,
        minimize: true,
        plugins: postCssSuite
      })
    ])
  },
  {
    input: 'src/index.js',
    output: [
      {
        file: `dist/${ name }.iife.js`,
        format: 'iife',
        name: '{{{ iifeName }}}',
        banner
      }
    ],
    plugins: plugins.concat([
      postCss({
        extract: path.join(__dirname, `dist/${ name }.css`),
        minimize: true,
        plugins: postCssSuite
      }),
      minify(),
      RollupPlugin({
        componentsSrc: path.join(__dirname, 'src/components')
      })
    ])
  }
]
